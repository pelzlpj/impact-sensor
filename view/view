#!/usr/bin/env python2.7

from __future__ import print_function

import contextlib
import errno
import fcntl
import logging
import os
import struct
import subprocess
import sys
import threading
import time
import tty
from zlib import adler32

import pylab

DOWNLOAD_IDLE_SEC = 0.1


def get_rn42_address():
    """Returns: bluetooth address for the first Roving Networks device in range,
    or None if no devices were found.
    """
    try:
        devices = subprocess.check_output(('hcitool', 'scan'))
    except subprocess.CalledProcessError:
        return None
    for line in devices.split('\n'):
        if not line.startswith('\t'):
            continue
        try:
            (address, name) = line.strip().split('\t')
        except ValueError:
            sys.stderr.write('Warning: unexpected output from "hcitool scan"\n')
            return None
        if name.startswith('FireFly'):
            return address
    return None


class UnexpectedEof(Exception):
    def __init__(self, partial_read):
        self.partial_read = partial_read


class RN42ConnectionManager(object):

    def __init__(self, host_device):
        """Initiate a connection from the host device (e.g. 'hci0') to the first
        detected Roving Networks bluetooth device.
        """
        self._host_dev   = host_device
        self._agent_proc = subprocess.Popen(
                ('bluetooth-agent', '0000'))

        self._lock           = threading.Lock()
        self._exit_requested = False    # guarded by _lock
        self._proc           = None     # guarded by _lock
        self._rfcomm_dev     = None     # guarded by _lock

        self._thread = threading.Thread(target=self._rfcomm_thread)
        self._thread.start()

    def get_rfcomm_device(self):
        """Poll the rfcomm process to determine whether or not the connection
        state has changed.  The caller should be prepared for failure when opening
        the rfcomm device, as it may disappear at any time.

        Returns: rfcomm device associated with the connected RN42 (i.e. '/dev/rfcomm0'),
        or None if the connection is currently broken.
        """
        with self._lock:
            return self._rfcomm_dev

    def terminate(self):
        """Drop connection and clean up."""
        with self._lock:
            self._exit_requested = True
            if self._proc:
                self._proc.terminate()
        self._thread.join()
        self._agent_proc.terminate()
        self._agent_proc.communicate()

    def _rfcomm_thread(self):
        bluetooth_address = None
        logging.basicConfig(filename='rfcomm.log', level=logging.DEBUG)

        while True:
            with self._lock:
                if self._exit_requested:
                    logging.info('Normal exit.')
                    return
                if bluetooth_address and not self._proc:
                    # We need to read rfcomm stdout promptly in order to get
                    # realtime connection status.  'stdbuf' is used to turn off
                    # stdout buffering in the rfcomm process.
                    logging.info('Starting rfcomm.')
                    self._proc = subprocess.Popen(
                            ('stdbuf', '-o0', 'rfcomm', 'connect', self._host_dev,
                                bluetooth_address),
                            stdout=subprocess.PIPE)

            if not bluetooth_address:
                bluetooth_address = get_rn42_address()
                if bluetooth_address:
                    logging.info('RN42 located at address %s' % bluetooth_address)

            if self._proc:
                line = self._proc.stdout.readline()
                logging.info('rfcomm stdout: \"%s\"' % line.rstrip())
                if not line:
                    self._proc.wait()
                    logging.info('rfcomm exit code: %u' % self._proc.returncode)
                    with self._lock:
                        self._proc       = None
                        self._rfcomm_dev = None
                elif line.startswith('Connected '):
                    with self._lock:
                        self._rfcomm_dev = line.split(' ')[1]
                    logging.info('New rfcomm device: %s' % self._rfcomm_dev)


class DataDownloader(object):

    def __init__(self, connection_manager):
        """Use the given connection manager to retrieve data payloads
        from an RN42-equipped device.
        """
        self._conn = connection_manager

        self._lock           = threading.Lock()
        self._exit_requested = False    # guarded by _lock
        self._payload        = None     # guarded by _lock

        self._thread = threading.Thread(target=self._download_thread)
        self._thread.start()

    def get_payload(self):
        """Retrieves the most recently downloaded payload, freeing the
        downloader to retrieve another payload.

        Returns: payload (str), or None
        """
        with self._lock:
            result = self._payload
            self._payload = None
        return result

    def terminate(self):
        """Stop downloading data as soon as possible."""
        with self._lock:
            self._exit_requested = True
        self._thread.join()

    def _download_thread(self):
        while True:
            with self._lock:
                if self._exit_requested:
                    return
                payload_consumed = self._payload is None
            if payload_consumed:
                dev = self._conn.get_rfcomm_device()
                if dev:
                    try:
                        fd = os.open(dev, os.O_RDWR)
                    except OSError:
                        continue
                    try:
                        # /dev/rfcommN is a tty; configure it in raw mode so we
                        # read arbitrary binary data.  Set non-blocking mode
                        # for better handling of exceptional conditions.
                        tty.setraw(fd)
                        flags = fcntl.fcntl(fd, fcntl.F_GETFL)
                        fcntl.fcntl(fd, fcntl.F_SETFL, flags | os.O_NONBLOCK)

                        received_ok = False
                        while not received_ok:
                            with self._lock:
                                if self._exit_requested:
                                    raise EnvironmentError()
                            self._request_payload(fd)
                            new_payload, checksum = self._download_payload(fd)
                            if checksum == (adler32(new_payload) & 0xffffffff):
                                self._ack_payload(fd)
                                received_ok = True
                            else:
                                sys.stderr.write('Bad checksum, reloading.\n')
                    except Exception:
                        continue
                    finally:
                        os.close(fd)

                    with self._lock:
                        self._payload = new_payload
                else:
                    time.sleep(DOWNLOAD_IDLE_SEC)
            else:
                time.sleep(DOWNLOAD_IDLE_SEC)

    def _read_exact(self, fd, byte_count):
        """Read exactly <byte_count> bytes, or raise UnexpectedEof."""
        result = ''
        while len(result) < byte_count:
            bytes_remaining = byte_count - len(result)
            try:
                data = os.read(fd, bytes_remaining)
                if not data:
                    raise UnexpectedEof(result)
                result += data
            except OSError, e:
                if e.errno == errno.EAGAIN:
                    with self._lock:
                        if self._exit_requested:
                            raise UnexpectedEof(result)
                    time.sleep(0.01)
        return result


    def _request_payload(self, fd):
        os.write(fd, 'send\r\n')

    def _download_payload(self, fd):
        print('download byte count')
        (byte_count,) = struct.unpack('<L', self._read_exact(fd, 4))
        print('download payload, %u bytes' % byte_count)
        payload = self._read_exact(fd, byte_count)
        print('download checksum')
        try:
            (checksum,) = struct.unpack('<L', self._read_exact(fd, 4))
        except UnexpectedEof, e:
            print('partial checksum: "%s"' % str(e.partial_read))
            raise
        print('checksum: 0x%x' % checksum)
        return payload, checksum

    def _ack_payload(self, fd):
        os.write(fd, 'ack\r\n')


def decode_payload(payload):
    """Decode a payload byte sequence as a list of 16-bit unsigned integers.

    Returns: list of int

    Raises: ValueError, if the payload has odd length
    """
    if len(payload) % 2 != 0:
        raise ValueError('Payload length is not even.')
    result = []
    for i in xrange(0, len(payload), 2):
        (word,) = struct.unpack('<H', payload[i:i+2])
        result.append(word)
    return result


if __name__ == '__main__':
    conn = RN42ConnectionManager('hci0')
    try:
        downloader = DataDownloader(conn)
        try:
            while True:
                payload = downloader.get_payload()
                if payload is not None:
                    print('New payload of size %u bytes.' % len(payload))
                    y = decode_payload(payload)
                    x = range(len(y))
                    pylab.plot(x, y)
                    pylab.show()
                time.sleep(0.1)
        finally:
            downloader.terminate()
    finally:
        conn.terminate()


